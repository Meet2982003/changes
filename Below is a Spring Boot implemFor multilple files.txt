Sure! Below is a **Spring Boot implementation** for handling **multiple file uploads** from different forms and storing the file paths in a **database**.

---

## **1. Project Structure**
```
/src
 â”œâ”€â”€ main/java/com/example/fileupload
 â”‚   â”œâ”€â”€ controller
 â”‚   â”‚   â”œâ”€â”€ FileController.java
 â”‚   â”œâ”€â”€ entity
 â”‚   â”‚   â”œâ”€â”€ Form.java
 â”‚   â”‚   â”œâ”€â”€ FileEntity.java
 â”‚   â”œâ”€â”€ repository
 â”‚   â”‚   â”œâ”€â”€ FormRepository.java
 â”‚   â”‚   â”œâ”€â”€ FileRepository.java
 â”‚   â”œâ”€â”€ service
 â”‚   â”‚   â”œâ”€â”€ FileService.java
 â”‚   â”‚   â”œâ”€â”€ FileServiceImpl.java
 â”‚   â”œâ”€â”€ FileUploadApplication.java
 â”œâ”€â”€ resources/application.properties
```

---

## **2. Maven Dependencies (pom.xml)**
Ensure you have these dependencies in your `pom.xml`:

```xml
<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Spring Boot Starter Data JPA -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>

    <!-- Spring Boot Starter Validation -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>

    <!-- H2 Database (for testing, use MySQL/PostgreSQL in production) -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <scope>runtime</scope>
    </dependency>

    <!-- Spring Boot DevTools (optional) -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-devtools</artifactId>
        <optional>true</optional>
    </dependency>
</dependencies>
```

---

## **3. Entity Classes**
### **Form Entity**
This stores form details.

```java
package com.example.fileupload.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import java.util.List;

@Entity
@Getter
@Setter
@Table(name = "forms")
public class Form {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String formName;

    @OneToMany(mappedBy = "form", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<FileEntity> files;
}
```

---

### **File Entity**
This stores each uploaded file linked to a **form**.

```java
package com.example.fileupload.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
@Table(name = "files")
public class FileEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String fileName;
    private String filePath;

    @ManyToOne
    @JoinColumn(name = "form_id", nullable = false)
    private Form form;
}
```

---

## **4. Repository Interfaces**
### **FormRepository**
```java
package com.example.fileupload.repository;

import com.example.fileupload.entity.Form;
import org.springframework.data.jpa.repository.JpaRepository;

public interface FormRepository extends JpaRepository<Form, Long> {
}
```

### **FileRepository**
```java
package com.example.fileupload.repository;

import com.example.fileupload.entity.FileEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface FileRepository extends JpaRepository<FileEntity, Long> {
    List<FileEntity> findByFormId(Long formId);
}
```

---

## **5. Service Layer**
### **FileService Interface**
```java
package com.example.fileupload.service;

import com.example.fileupload.entity.FileEntity;
import org.springframework.web.multipart.MultipartFile;
import java.util.List;

public interface FileService {
    void uploadFiles(Long formId, List<MultipartFile> files);
    List<FileEntity> getFilesByFormId(Long formId);
}
```

---

### **FileServiceImpl (Implementation)**
```java
package com.example.fileupload.service;

import com.example.fileupload.entity.FileEntity;
import com.example.fileupload.entity.Form;
import com.example.fileupload.repository.FileRepository;
import com.example.fileupload.repository.FormRepository;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class FileServiceImpl implements FileService {

    private final FileRepository fileRepository;
    private final FormRepository formRepository;

    public FileServiceImpl(FileRepository fileRepository, FormRepository formRepository) {
        this.fileRepository = fileRepository;
        this.formRepository = formRepository;
    }

    @Override
    public void uploadFiles(Long formId, List<MultipartFile> files) {
        Form form = formRepository.findById(formId)
                .orElseThrow(() -> new RuntimeException("Form not found!"));

        String uploadDir = "uploads/form_" + formId;
        new File(uploadDir).mkdirs(); // Create directory if not exists

        List<FileEntity> fileEntities = files.stream().map(file -> {
            try {
                String filePath = uploadDir + "/" + file.getOriginalFilename();
                file.transferTo(new File(filePath));

                FileEntity fileEntity = new FileEntity();
                fileEntity.setFileName(file.getOriginalFilename());
                fileEntity.setFilePath(filePath);
                fileEntity.setForm(form);
                return fileEntity;
            } catch (IOException e) {
                throw new RuntimeException("File upload failed: " + file.getOriginalFilename(), e);
            }
        }).collect(Collectors.toList());

        fileRepository.saveAll(fileEntities);
    }

    @Override
    public List<FileEntity> getFilesByFormId(Long formId) {
        return fileRepository.findByFormId(formId);
    }
}
```

---

## **6. Controller**
```java
package com.example.fileupload.controller;

import com.example.fileupload.entity.FileEntity;
import com.example.fileupload.repository.FormRepository;
import com.example.fileupload.service.FileService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.util.List;

@RestController
@RequestMapping("/files")
public class FileController {

    private final FileService fileService;
    private final FormRepository formRepository;

    public FileController(FileService fileService, FormRepository formRepository) {
        this.fileService = fileService;
        this.formRepository = formRepository;
    }

    @PostMapping("/upload/{formId}")
    public ResponseEntity<String> uploadFiles(
            @PathVariable Long formId,
            @RequestParam("files") List<MultipartFile> files) {
        fileService.uploadFiles(formId, files);
        return ResponseEntity.ok("Files uploaded successfully.");
    }

    @GetMapping("/form/{formId}")
    public ResponseEntity<List<FileEntity>> getFilesByForm(@PathVariable Long formId) {
        return ResponseEntity.ok(fileService.getFilesByFormId(formId));
    }
}
```

---

## **7. Configuration (`application.properties`)**
```properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
```

---

## **8. How It Works?**
- **Upload Files**
  ```http
  POST /files/upload/1
  Content-Type: multipart/form-data
  ```
  Send `files` as **form-data** with 28 or 22 files.

- **Get Files for a Form**
  ```http
  GET /files/form/1
  ```
  This will return all file details for **Form 1**.

---

## **Final Thoughts**
âœ… **Scalable** â€“ You can store unlimited files dynamically.  
âœ… **Efficient** â€“ Avoids unnecessary database columns.  
âœ… **Flexible** â€“ Works for **any number of forms and files**.  

Let me know if you need further modifications! ðŸš€