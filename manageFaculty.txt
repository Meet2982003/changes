Here's a solution to your requirement using Spring Boot. The steps include defining the **entity class**, **repository**, **service interface**, **service implementation**, and **controller**. We'll also add a filter functionality to fetch data based on the `role`.

---

### 1. **Entity Class**
```java
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String designation;
    private String role;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDesignation() {
        return designation;
    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }
}
```

---

### 2. **Repository**
```java
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface EmployeeRepository extends JpaRepository<Employee, Long> {
    List<Employee> findByRole(String role);
}
```

---

### 3. **Service Interface**
```java
import java.util.List;

public interface EmployeeService {
    Employee saveEmployee(Employee employee);
    List<Employee> getAllEmployees();
    Employee updateEmployee(Long id, Employee employee);
    void deleteEmployee(Long id);
    List<Employee> getEmployeesByRole(String role);
}
```

---

### 4. **Service Implementation**
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    @Override
    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    @Override
    public Employee updateEmployee(Long id, Employee employee) {
        Optional<Employee> optionalEmployee = employeeRepository.findById(id);
        if (optionalEmployee.isPresent()) {
            Employee existingEmployee = optionalEmployee.get();
            existingEmployee.setName(employee.getName());
            existingEmployee.setDesignation(employee.getDesignation());
            existingEmployee.setRole(employee.getRole());
            return employeeRepository.save(existingEmployee);
        } else {
            throw new RuntimeException("Employee not found with id " + id);
        }
    }

    @Override
    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }

    @Override
    public List<Employee> getEmployeesByRole(String role) {
        return employeeRepository.findByRole(role);
    }
}
```

---

### 5. **Controller**
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @PostMapping
    public ResponseEntity<Employee> saveEmployee(@RequestBody Employee employee) {
        return ResponseEntity.ok(employeeService.saveEmployee(employee));
    }

    @GetMapping
    public ResponseEntity<List<Employee>> getAllEmployees() {
        return ResponseEntity.ok(employeeService.getAllEmployees());
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee employee) {
        return ResponseEntity.ok(employeeService.updateEmployee(id, employee));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
        return ResponseEntity.ok("Employee deleted successfully.");
    }

    @GetMapping("/filter")
    public ResponseEntity<List<Employee>> getEmployeesByRole(@RequestParam String role) {
        return ResponseEntity.ok(employeeService.getEmployeesByRole(role));
    }
}
```

---

### 6. **Testing Filter**

To test the filter functionality, use this API endpoint:

**Request:**
```http
GET /api/employees/filter?role=Manager
```

**Response:**
```json
[
    {
        "id": 1,
        "name": "John Doe",
        "designation": "Software Engineer",
        "role": "Manager"
    },
    {
        "id": 2,
        "name": "Jane Smith",
        "designation": "Team Lead",
        "role": "Manager"
    }
]
```

---

### Summary of CRUD Endpoints

1. **Save an Employee:**
   - **POST /api/employees**
   - Request Body: `{ "name": "John", "designation": "Developer", "role": "Engineer" }`

2. **View All Employees:**
   - **GET /api/employees**

3. **Update an Employee:**
   - **PUT /api/employees/{id}**
   - Request Body: `{ "name": "John Updated", "designation": "Senior Developer", "role": "Engineer" }`

4. **Delete an Employee:**
   - **DELETE /api/employees/{id}**

5. **Filter Employees by Role:**
   - **GET /api/employees/filter?role=RoleName**

---

This implementation covers all CRUD operations and the filter functionality based on the `role`. Let me know if you need further customizations!


//updated employeeController

package org.bisag.ocbis.controllers;

import org.bisag.ocbis.models.Employee;
import org.bisag.ocbis.payloads.request.EncryptedRequest;
import org.bisag.ocbis.payloads.response.EncryptedResponse;
import org.bisag.ocbis.services.EmployeeService;
import org.bisag.ocbis.utils.Json;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin("*")
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    // 1 - Save Employee
    @PostMapping("/saveEmployee")
    public ResponseEntity<EncryptedResponse> saveEmployee(@RequestBody EncryptedRequest req) {
        try {
            var employee = req.bodyAs(Employee.class);
            employeeService.saveEmployee(employee);
            return ResponseEntity.status(HttpStatus.CREATED)
                    .body(new EncryptedResponse("Employee created successfully."));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new EncryptedResponse("An error occurred."));
        }
    }

    // 2 - View All Employees
    @PostMapping("/viewAllEmployees")
    public EncryptedResponse getAllEmployees(@RequestBody EncryptedRequest req) {
        try {
            List<Employee> employees = employeeService.getAllEmployees();
            return new EncryptedResponse(employees);
        } catch (Exception e) {
            return new EncryptedResponse("An error occurred while fetching employees.");
        }
    }

    // 3 - Edit Employee
    @PostMapping("/editEmployeeById")
    public ResponseEntity<EncryptedResponse> updateEmployee(@RequestBody EncryptedRequest req) {
        try {
            var employee = Json.deserialize(Employee.class, req.getData());
            employeeService.updateEmployee(employee.getId(), employee);
            return ResponseEntity.ok(new EncryptedResponse("Employee details updated successfully."));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new EncryptedResponse("An error occurred while updating employee details."));
        }
    }

    // 4 - Delete Employee
    @PostMapping("/deleteEmployeeById")
    public ResponseEntity<EncryptedResponse> deleteEmployee(@RequestBody EncryptedRequest req) {
        try {
            var employee = Json.deserialize(Employee.class, req.getData());
            employeeService.deleteEmployee(employee.getId());
            return ResponseEntity.ok(new EncryptedResponse("Employee deleted successfully."));
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new EncryptedResponse("An error occurred while deleting the employee."));
        }
    }

    // 5 - Filter Employees by Role
    @PostMapping("/filterEmployeesByRole")
    public EncryptedResponse getEmployeesByRole(@RequestBody EncryptedRequest req) {
        try {
            String role = (String) Json.deserialize(Object.class, req.getData());
            List<Employee> employees = employeeService.getEmployeesByRole(role);
            return new EncryptedResponse(employees);
        } catch (Exception e) {
            return new EncryptedResponse("An error occurred while filtering employees by role.");
        }
    }
}
